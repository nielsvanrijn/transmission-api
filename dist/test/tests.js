"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai = require("chai");
const asPromised = require("chai-as-promised");
const index_1 = require("../index");
chai.use(asPromised);
const expect = chai.expect;
describe('Client', function () {
    const opts = {
        port: 9092
    };
    let server = new index_1.MockServer(opts);
    server.start();
    beforeEach(function () {
        server.clear();
    });
    const client = new index_1.Client(null, opts);
    describe('#getAllTorrents()', function () {
        it('should call without error', function () {
            return client.getAllTorrents();
        });
        it('should return an array', function () {
            return expect(client.getAllTorrents()).to.eventually.be.an('array');
        });
        it('should have a valid RPC call', function (done) {
            client.once('request', (data) => {
                try {
                    expect(data).to.have.all.keys('method', 'arguments');
                    expect(data.arguments).to.have.property('fields');
                }
                catch (e) {
                    done(e);
                    return;
                }
                done();
            });
            client.getAllTorrents().catch(done);
        });
    });
    describe('#getTorrent()', function () {
        context('when called with string', function () {
            it('should call without error', function () {
                return client.getTorrent("recently-active");
            });
            it('should return an array', function () {
                return expect(client.getTorrent("recently-active")).to.eventually.be.an('array');
            });
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdGVzdC90ZXN0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLDZCQUE2QjtBQUM3QiwrQ0FBK0M7QUFDL0Msb0NBQThDO0FBQzlDLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDckIsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztBQUUzQixRQUFRLENBQUMsUUFBUSxFQUFFO0lBQ2YsTUFBTSxJQUFJLEdBQUc7UUFDVCxJQUFJLEVBQUUsSUFBSTtLQUNiLENBQUE7SUFFRCxJQUFJLE1BQU0sR0FBSSxJQUFJLGtCQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbkMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBRWYsVUFBVSxDQUFDO1FBQ1AsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ25CLENBQUMsQ0FBQyxDQUFDO0lBRUgsTUFBTSxNQUFNLEdBQUcsSUFBSSxjQUFNLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3RDLFFBQVEsQ0FBQyxtQkFBbUIsRUFBRTtRQUMxQixFQUFFLENBQUMsMkJBQTJCLEVBQUU7WUFDNUIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUNuQyxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyx3QkFBd0IsRUFBRTtZQUN6QixNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN4RSxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyw4QkFBOEIsRUFBRSxVQUFVLElBQUk7WUFDN0MsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJO2dCQUN4QixJQUFJLENBQUM7b0JBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsV0FBVyxDQUFDLENBQUE7b0JBQ3BELE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQ3RELENBQUM7Z0JBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDVCxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ1IsTUFBTSxDQUFDO2dCQUNYLENBQUM7Z0JBQ0QsSUFBSSxFQUFFLENBQUM7WUFDWCxDQUFDLENBQUMsQ0FBQztZQUVILE1BQU0sQ0FBQyxjQUFjLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDeEMsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxlQUFlLEVBQUU7UUFDdEIsT0FBTyxDQUFDLHlCQUF5QixFQUFFO1lBQy9CLEVBQUUsQ0FBQywyQkFBMkIsRUFBRTtnQkFDNUIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsaUJBQWlCLENBQUMsQ0FBQztZQUNoRCxDQUFDLENBQUMsQ0FBQztZQUVILEVBQUUsQ0FBQyx3QkFBd0IsRUFBRTtnQkFDekIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDckYsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBtb2NoYSBmcm9tICdtb2NoYSc7XG5pbXBvcnQgKiBhcyBjaGFpIGZyb20gJ2NoYWknO1xuaW1wb3J0ICogYXMgYXNQcm9taXNlZCBmcm9tICdjaGFpLWFzLXByb21pc2VkJztcbmltcG9ydCB7IENsaWVudCwgTW9ja1NlcnZlciB9IGZyb20gJy4uL2luZGV4JztcbmNoYWkudXNlKGFzUHJvbWlzZWQpO1xuY29uc3QgZXhwZWN0ID0gY2hhaS5leHBlY3Q7XG5cbmRlc2NyaWJlKCdDbGllbnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3Qgb3B0cyA9IHtcbiAgICAgICAgcG9ydDogOTA5MlxuICAgIH1cblxuICAgIGxldCBzZXJ2ZXIgPSAgbmV3IE1vY2tTZXJ2ZXIob3B0cyk7XG4gICAgc2VydmVyLnN0YXJ0KCk7XG5cbiAgICBiZWZvcmVFYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICBzZXJ2ZXIuY2xlYXIoKTtcbiAgICB9KTtcblxuICAgIGNvbnN0IGNsaWVudCA9IG5ldyBDbGllbnQobnVsbCwgb3B0cyk7XG4gICAgZGVzY3JpYmUoJyNnZXRBbGxUb3JyZW50cygpJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBpdCgnc2hvdWxkIGNhbGwgd2l0aG91dCBlcnJvcicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBjbGllbnQuZ2V0QWxsVG9ycmVudHMoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCByZXR1cm4gYW4gYXJyYXknLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gZXhwZWN0KGNsaWVudC5nZXRBbGxUb3JyZW50cygpKS50by5ldmVudHVhbGx5LmJlLmFuKCdhcnJheScpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIGhhdmUgYSB2YWxpZCBSUEMgY2FsbCcsIGZ1bmN0aW9uIChkb25lKSB7XG4gICAgICAgICAgICBjbGllbnQub25jZSgncmVxdWVzdCcsIChkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgZXhwZWN0KGRhdGEpLnRvLmhhdmUuYWxsLmtleXMoJ21ldGhvZCcsICdhcmd1bWVudHMnKVxuICAgICAgICAgICAgICAgICAgICBleHBlY3QoZGF0YS5hcmd1bWVudHMpLnRvLmhhdmUucHJvcGVydHkoJ2ZpZWxkcycpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZG9uZShlKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgY2xpZW50LmdldEFsbFRvcnJlbnRzKCkuY2F0Y2goZG9uZSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJyNnZXRUb3JyZW50KCknLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnRleHQoJ3doZW4gY2FsbGVkIHdpdGggc3RyaW5nJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaXQoJ3Nob3VsZCBjYWxsIHdpdGhvdXQgZXJyb3InLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNsaWVudC5nZXRUb3JyZW50KFwicmVjZW50bHktYWN0aXZlXCIpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGl0KCdzaG91bGQgcmV0dXJuIGFuIGFycmF5JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBleHBlY3QoY2xpZW50LmdldFRvcnJlbnQoXCJyZWNlbnRseS1hY3RpdmVcIikpLnRvLmV2ZW50dWFsbHkuYmUuYW4oJ2FycmF5Jyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59KTsiXX0=