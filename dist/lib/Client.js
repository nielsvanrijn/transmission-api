"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const http = require("http");
const sd = require("string_decoder");
const EventEmitter = require("events");
const Communication_1 = require("./Communication");
const Session_1 = require("./Session");
const Torrent_1 = require("./Torrent");
const defaultOpts = {
    protocol: "http:",
    host: "127.0.0.1",
    path: "/transmission/rpc",
    port: 9091,
    username: null,
    password: null
};
const defaultFields = [
    "activityDate", "addedDate", "bandwidthPriority", "comment",
    "corruptEver", "creator", "dateCreated", "desiredAvailable",
    "doneDate", "downloadDir", "downloadedEver", "downloadLimit",
    "downloadLimited", "error", "errorString", "eta",
    "etaIdle", "files", "fileStats", "hashString",
    "haveUnchecked", "haveValid", "honorsSessionLimits",
    "isFinished", "isPrivate", "isStalled", "leftUntilDone",
    "magnetLink", "manualAnnounceTime", "maxConnectedPeers",
    "metadataPercentComplete", "name", "peer-limit", "peers",
    "peersConnected", "peersFrom", "peersGettingFromUs",
    "peersSendingToUs", "percentDone", "pieces", "pieceCount",
    "pieceSize", "priorities", "queuePosition", "rateDownload",
    "rateUpload", "recheckProgress", "secondsDownloading",
    "secondsSeeding", "seedIdleLimit", "seedIdleMode", "seedRatioLimit",
    "seedRatioMode", "sizeWhenDone", "startDate", "status",
    "trackers", "trackerStats", "totalSize", "torrentFile",
    "uploadedEver", "uploadLimit", "uploadLimited", "uploadRatio",
    "wanted", "webseeds", "webseedsSendingToUs"
];
class Client extends EventEmitter {
    constructor(sessionID = null, options = defaultOpts) {
        super();
        this.needsAuth = false;
        this.options = Object.assign({}, defaultOpts, options);
        if (sessionID)
            this.sessionID = sessionID;
        if (options.username) {
            this.needsAuth = true;
            this.auth = options.username + ":" + options.password;
        }
    }
    emit(event, data) { return super.emit(event, data); }
    on(event, listener) { return super.on(event, listener); }
    once(event, listener) { return super.once(event, listener); }
    addListener(event, listener) { return super.addListener(event, listener); }
    prependListener(event, listener) { return super.prependListener(event, listener); }
    prependOnceListener(event, listener) { return super.prependOnceListener(event, listener); }
    removeListener(event, listener) { return super.removeListener(event, listener); }
    convertIds(ids) {
        if (Array.isArray(ids) && ids.length == 0) {
            ids = null;
        }
        if (ids) {
            if (typeof ids === "object" && !Array.isArray(ids)) {
                ids = ids.id;
            }
            else if (Array.isArray(ids) && typeof ids[0] === "object") {
                ids = ids.map(elem => { return elem.id; });
            }
        }
        return ids;
    }
    getAllTorrents(fields = defaultFields, notFields = []) {
        return __awaiter(this, void 0, void 0, function* () {
            let torrents = yield this.getTorrent(null, fields, notFields);
            if (!torrents.length)
                return [torrents];
            else
                return torrents;
        });
    }
    getTorrent(ids, fields = defaultFields, notFields = []) {
        return __awaiter(this, void 0, void 0, function* () {
            let options = {};
            ids = this.convertIds(ids);
            if (ids)
                options.ids = ids;
            if (!fields)
                fields = defaultFields;
            if (!notFields)
                notFields = [];
            fields = fields.filter(item => !(~notFields.indexOf(item)));
            fields.push("id");
            fields.push("name");
            if (fields.indexOf("files") > -1) {
                fields.push("fileStats");
            }
            if (fields.indexOf("trackers") > -1) {
                fields.push("trackerStats");
            }
            options["fields"] = fields;
            let req = new Communication_1.TransmissionRequest("torrent-get", options);
            let res = yield this.sendRequest(req);
            let x = [];
            for (var i = 0; i < res.arguments["torrents"].length; i++) {
                var element = res.arguments["torrents"][i];
                let torrent = new Torrent_1.Torrent(this, fields).deserialize(element);
                x.push(torrent);
            }
            if (x.length == 1)
                return x[0];
            else
                return x;
        });
    }
    removeTorrent(ids, deleteData = false) {
        return __awaiter(this, void 0, void 0, function* () {
            let options = {};
            ids = this.convertIds(ids);
            if (ids)
                options.ids = ids;
            options["delete-local-data"] = deleteData;
            let req = new Communication_1.TransmissionRequest("torrent-remove", options);
            let res = yield this.sendRequest(req);
        });
    }
    addTorrent(file, options) {
        return __awaiter(this, void 0, void 0, function* () {
            options = Object.assign({}, options, { metainfo: file.toString('base64') });
            let req = new Communication_1.TransmissionRequest("torrent-add", options);
            let res = yield this.sendRequest(req);
            return res.arguments;
        });
    }
    setTorrentLocation(ids, options) {
        return __awaiter(this, void 0, void 0, function* () {
            ids = this.convertIds(ids);
            if (ids && !options.ids)
                options.ids = ids;
            let req = new Communication_1.TransmissionRequest("torrent-set-location", options);
            let res = yield this.sendRequest(req);
        });
    }
    renameTorrentPath(id, path, name) {
        return __awaiter(this, void 0, void 0, function* () {
            let ids = this.convertIds([id]);
            let req = new Communication_1.TransmissionRequest("torrent-rename-path", { ids, path, name });
            let res = yield this.sendRequest(req);
            return res.arguments;
        });
    }
    setTorrentProperties(ids, options) {
        return __awaiter(this, void 0, void 0, function* () {
            ids = this.convertIds(ids);
            if (ids && !options.ids)
                options.ids = ids;
            let req = new Communication_1.TransmissionRequest("torrent-set", options);
            let res = yield this.sendRequest(req);
        });
    }
    getSession() {
        return __awaiter(this, void 0, void 0, function* () {
            let req = new Communication_1.TransmissionRequest("session-get", {});
            let res = yield this.sendRequest(req);
            return new Session_1.Session(this).deserialize(res.arguments);
        });
    }
    setSessionProperties(options) {
        return __awaiter(this, void 0, void 0, function* () {
            let req = new Communication_1.TransmissionRequest("session-set", options);
            yield this.sendRequest(req);
        });
    }
    sendRequest(trequest) {
        return __awaiter(this, void 0, void 0, function* () {
            this.emit("request", trequest);
            return new Promise((resolve, reject) => {
                let failed = false;
                let reqopts = {};
                if (this.options.port)
                    reqopts.port = this.options.port;
                if (this.options.path)
                    reqopts.path = this.options.path;
                if (this.options.host)
                    reqopts.hostname = this.options.host;
                if (this.options.protocol)
                    reqopts.protocol = this.options.protocol;
                if (this.needsAuth)
                    reqopts.auth = this.auth;
                reqopts.method = "POST";
                reqopts.headers = {};
                if (this.sessionID)
                    reqopts.headers["x-transmission-session-id"] = this.sessionID;
                reqopts.headers["content-type"] = "application/json";
                const req = http.request(reqopts, res => {
                    if (res.statusCode < 200 || res.statusCode > 299) {
                        failed = true;
                        if (res.statusCode == 409) {
                            this.sessionID = res.headers["x-transmission-session-id"];
                            resolve(this.sendRequest(trequest));
                        }
                        else
                            reject(new Error("Failed to load: " + res.statusCode));
                    }
                    let data = "";
                    let decoder = new sd.StringDecoder("utf-8");
                    res.on("data", chunk => {
                        let textChunk = decoder.write(chunk);
                        data += textChunk;
                    });
                    res.on("end", () => {
                        if (!failed) {
                            let result = JSON.parse(data);
                            this.emit("response", result);
                            if (result.result != "success")
                                reject(result.result);
                            else
                                resolve(result);
                        }
                    });
                });
                req.on("error", err => reject(err));
                req.write(JSON.stringify(trequest));
                req.end();
            });
        });
    }
}
exports.Client = Client;
//# sourceMappingURL=data:application/json;base64,